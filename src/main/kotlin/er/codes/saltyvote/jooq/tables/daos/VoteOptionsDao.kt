/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.daos


import er.codes.saltyvote.jooq.AbstractSpringDAOImpl
import er.codes.saltyvote.jooq.tables.VoteOptions
import er.codes.saltyvote.jooq.tables.records.VoteOptionsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.JSONB
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Repository
open class VoteOptionsDao(configuration: Configuration?) : AbstractSpringDAOImpl<VoteOptionsRecord, er.codes.saltyvote.jooq.tables.pojos.VoteOptions, Long>(VoteOptions.VOTE_OPTIONS, er.codes.saltyvote.jooq.tables.pojos.VoteOptions::class.java, configuration) {

    /**
     * Create a new VoteOptionsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: er.codes.saltyvote.jooq.tables.pojos.VoteOptions): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): er.codes.saltyvote.jooq.tables.pojos.VoteOptions? = fetchOne(VoteOptions.VOTE_OPTIONS.ID, value)

    /**
     * Fetch records that have <code>vote_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVoteId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.VOTE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vote_id IN (values)</code>
     */
    fun fetchByVoteId(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.VOTE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLabel(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.LABEL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    fun fetchByLabel(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.LABEL, *values)

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfData(lowerInclusive: JSONB?, upperInclusive: JSONB?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.DATA, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    fun fetchByData(vararg values: JSONB): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.DATA, *values)

    /**
     * Fetch records that have <code>position BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPosition(lowerInclusive: Int?, upperInclusive: Int?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.POSITION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>position IN (values)</code>
     */
    fun fetchByPosition(vararg values: Int): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.POSITION, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetchRange(VoteOptions.VOTE_OPTIONS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.VoteOptions> = fetch(VoteOptions.VOTE_OPTIONS.CREATED_AT, *values)
}
