/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables


import er.codes.saltyvote.jooq.Public
import er.codes.saltyvote.jooq.keys.UQ_SUBMISSION_OPTION
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSION_ENTRIES_PKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_OPTION_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_SUBMISSION_ID_FKEY
import er.codes.saltyvote.jooq.tables.VoteOptions.VoteOptionsPath
import er.codes.saltyvote.jooq.tables.VoteSubmissions.VoteSubmissionsPath
import er.codes.saltyvote.jooq.tables.records.VoteSubmissionEntriesRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VoteSubmissionEntries(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VoteSubmissionEntriesRecord>?,
    parentPath: InverseForeignKey<out Record, VoteSubmissionEntriesRecord>?,
    aliased: Table<VoteSubmissionEntriesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VoteSubmissionEntriesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vote_submission_entries</code>
         */
        val VOTE_SUBMISSION_ENTRIES: VoteSubmissionEntries = VoteSubmissionEntries()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VoteSubmissionEntriesRecord> = VoteSubmissionEntriesRecord::class.java

    /**
     * The column <code>public.vote_submission_entries.id</code>.
     */
    val ID: TableField<VoteSubmissionEntriesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.vote_submission_entries.submission_id</code>.
     */
    val SUBMISSION_ID: TableField<VoteSubmissionEntriesRecord, Long?> = createField(DSL.name("submission_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vote_submission_entries.option_id</code>.
     */
    val OPTION_ID: TableField<VoteSubmissionEntriesRecord, Long?> = createField(DSL.name("option_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vote_submission_entries.rank</code>.
     */
    val RANK: TableField<VoteSubmissionEntriesRecord, Int?> = createField(DSL.name("rank"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.vote_submission_entries.selected</code>.
     */
    val SELECTED: TableField<VoteSubmissionEntriesRecord, Boolean?> = createField(DSL.name("selected"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<VoteSubmissionEntriesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VoteSubmissionEntriesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VoteSubmissionEntriesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vote_submission_entries</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vote_submission_entries</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vote_submission_entries</code> table reference
     */
    constructor(): this(DSL.name("vote_submission_entries"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteSubmissionEntriesRecord>?, parentPath: InverseForeignKey<out Record, VoteSubmissionEntriesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VOTE_SUBMISSION_ENTRIES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VoteSubmissionEntriesPath : VoteSubmissionEntries, Path<VoteSubmissionEntriesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteSubmissionEntriesRecord>?, parentPath: InverseForeignKey<out Record, VoteSubmissionEntriesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VoteSubmissionEntriesRecord>): super(alias, aliased)
        override fun `as`(alias: String): VoteSubmissionEntriesPath = VoteSubmissionEntriesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VoteSubmissionEntriesPath = VoteSubmissionEntriesPath(alias, this)
        override fun `as`(alias: Table<*>): VoteSubmissionEntriesPath = VoteSubmissionEntriesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<VoteSubmissionEntriesRecord, Long?> = super.getIdentity() as Identity<VoteSubmissionEntriesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<VoteSubmissionEntriesRecord> = VOTE_SUBMISSION_ENTRIES_PKEY
    override fun getUniqueKeys(): List<UniqueKey<VoteSubmissionEntriesRecord>> = listOf(UQ_SUBMISSION_OPTION)
    override fun getReferences(): List<ForeignKey<VoteSubmissionEntriesRecord, *>> = listOf(VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_OPTION_ID_FKEY, VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_SUBMISSION_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.vote_options</code> table.
     */
    fun voteOptions(): VoteOptionsPath = voteOptions
    val voteOptions: VoteOptionsPath by lazy { VoteOptionsPath(this, VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_OPTION_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.vote_submissions</code>
     * table.
     */
    fun voteSubmissions(): VoteSubmissionsPath = voteSubmissions
    val voteSubmissions: VoteSubmissionsPath by lazy { VoteSubmissionsPath(this, VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_SUBMISSION_ID_FKEY, null) }
    override fun `as`(alias: String): VoteSubmissionEntries = VoteSubmissionEntries(DSL.name(alias), this)
    override fun `as`(alias: Name): VoteSubmissionEntries = VoteSubmissionEntries(alias, this)
    override fun `as`(alias: Table<*>): VoteSubmissionEntries = VoteSubmissionEntries(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VoteSubmissionEntries = VoteSubmissionEntries(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VoteSubmissionEntries = VoteSubmissionEntries(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VoteSubmissionEntries = VoteSubmissionEntries(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VoteSubmissionEntries = VoteSubmissionEntries(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VoteSubmissionEntries = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VoteSubmissionEntries = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VoteSubmissionEntries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VoteSubmissionEntries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VoteSubmissionEntries = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VoteSubmissionEntries = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VoteSubmissionEntries = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VoteSubmissionEntries = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VoteSubmissionEntries = where(DSL.notExists(select))
}
