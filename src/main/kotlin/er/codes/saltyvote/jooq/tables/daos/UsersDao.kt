/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.daos


import er.codes.saltyvote.jooq.AbstractSpringDAOImpl
import er.codes.saltyvote.jooq.tables.Users
import er.codes.saltyvote.jooq.tables.records.UsersRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Repository
open class UsersDao(configuration: Configuration?) : AbstractSpringDAOImpl<UsersRecord, er.codes.saltyvote.jooq.tables.pojos.Users, UUID>(Users.USERS, er.codes.saltyvote.jooq.tables.pojos.Users::class.java, configuration) {

    /**
     * Create a new UsersDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: er.codes.saltyvote.jooq.tables.pojos.Users): UUID? = o.uuid

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUuid(lowerInclusive: UUID?, upperInclusive: UUID?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.UUID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    fun fetchByUuid(vararg values: UUID): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.UUID, *values)

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    fun fetchOneByUuid(value: UUID): er.codes.saltyvote.jooq.tables.pojos.Users? = fetchOne(Users.USERS.UUID, value)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.EMAIL, *values)

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    fun fetchOneByEmail(value: String): er.codes.saltyvote.jooq.tables.pojos.Users? = fetchOne(Users.USERS.EMAIL, value)

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUsername(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.USERNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    fun fetchByUsername(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.USERNAME, *values)

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    fun fetchOneByUsername(value: String): er.codes.saltyvote.jooq.tables.pojos.Users? = fetchOne(Users.USERS.USERNAME, value)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPassword(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPassword(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.PASSWORD, *values)

    /**
     * Fetch records that have <code>admin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAdmin(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.ADMIN, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>admin IN (values)</code>
     */
    fun fetchByAdmin(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.ADMIN, *values.toTypedArray())

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEnabled(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.ENABLED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    fun fetchByEnabled(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.ENABLED, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetchRange(Users.USERS.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.Users> = fetch(Users.USERS.UPDATED_AT, *values)
}
