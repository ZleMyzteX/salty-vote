/* tslint:disable */
/* eslint-disable */
/**
 * SaltyVote API
 * API documentation for the saltyvote application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCollaboratorDto,
  CollaboratorDto,
} from '../models/index';
import {
    AddCollaboratorDtoFromJSON,
    AddCollaboratorDtoToJSON,
    CollaboratorDtoFromJSON,
    CollaboratorDtoToJSON,
} from '../models/index';

export interface AddCollaboratorRequest {
    voteId: number;
    addCollaboratorDto: AddCollaboratorDto;
}

export interface GetCollaboratorsRequest {
    voteId: number;
}

export interface RemoveCollaboratorRequest {
    voteId: number;
    collaboratorId: number;
}

/**
 * 
 */
export class VoteCollaboratorControllerApi extends runtime.BaseAPI {

    /**
     */
    async addCollaboratorRaw(requestParameters: AddCollaboratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollaboratorDto>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling addCollaborator().'
            );
        }

        if (requestParameters['addCollaboratorDto'] == null) {
            throw new runtime.RequiredError(
                'addCollaboratorDto',
                'Required parameter "addCollaboratorDto" was null or undefined when calling addCollaborator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/votes/{voteId}/collaborators`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCollaboratorDtoToJSON(requestParameters['addCollaboratorDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollaboratorDtoFromJSON(jsonValue));
    }

    /**
     */
    async addCollaborator(requestParameters: AddCollaboratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollaboratorDto> {
        const response = await this.addCollaboratorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCollaboratorsRaw(requestParameters: GetCollaboratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CollaboratorDto>>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling getCollaborators().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/collaborators`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CollaboratorDtoFromJSON));
    }

    /**
     */
    async getCollaborators(requestParameters: GetCollaboratorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CollaboratorDto>> {
        const response = await this.getCollaboratorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeCollaboratorRaw(requestParameters: RemoveCollaboratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling removeCollaborator().'
            );
        }

        if (requestParameters['collaboratorId'] == null) {
            throw new runtime.RequiredError(
                'collaboratorId',
                'Required parameter "collaboratorId" was null or undefined when calling removeCollaborator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/collaborators/{collaboratorId}`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));
        urlPath = urlPath.replace(`{${"collaboratorId"}}`, encodeURIComponent(String(requestParameters['collaboratorId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeCollaborator(requestParameters: RemoveCollaboratorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeCollaboratorRaw(requestParameters, initOverrides);
    }

}
