/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.daos


import er.codes.saltyvote.jooq.AbstractSpringDAOImpl
import er.codes.saltyvote.jooq.tables.VoteSubmissions
import er.codes.saltyvote.jooq.tables.records.VoteSubmissionsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Repository
open class VoteSubmissionsDao(configuration: Configuration?) : AbstractSpringDAOImpl<VoteSubmissionsRecord, er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions, Long>(VoteSubmissions.VOTE_SUBMISSIONS, er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions::class.java, configuration) {

    /**
     * Create a new VoteSubmissionsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetchRange(VoteSubmissions.VOTE_SUBMISSIONS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetch(VoteSubmissions.VOTE_SUBMISSIONS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions? = fetchOne(VoteSubmissions.VOTE_SUBMISSIONS.ID, value)

    /**
     * Fetch records that have <code>vote_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVoteId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetchRange(VoteSubmissions.VOTE_SUBMISSIONS.VOTE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vote_id IN (values)</code>
     */
    fun fetchByVoteId(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetch(VoteSubmissions.VOTE_SUBMISSIONS.VOTE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: UUID?, upperInclusive: UUID?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetchRange(VoteSubmissions.VOTE_SUBMISSIONS.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: UUID): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetch(VoteSubmissions.VOTE_SUBMISSIONS.USER_ID, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetchRange(VoteSubmissions.VOTE_SUBMISSIONS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions> = fetch(VoteSubmissions.VOTE_SUBMISSIONS.CREATED_AT, *values)
}
