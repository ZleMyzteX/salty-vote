/* tslint:disable */
/* eslint-disable */
/**
 * SaltyVote API
 * API documentation for the saltyvote application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VoteWithEnrichedAirbnbOptionsDto,
} from '../models/index';
import {
    VoteWithEnrichedAirbnbOptionsDtoFromJSON,
    VoteWithEnrichedAirbnbOptionsDtoToJSON,
} from '../models/index';

export interface GetEnrichedAirbnbVoteRequest {
    voteId: number;
}

export interface GetVoteOptionExternalDataStatusRequest {
    optionId: number;
}

export interface GetVoteOptionPictureRequest {
    optionId: number;
}

/**
 * 
 */
export class EnrichedVoteControllerApi extends runtime.BaseAPI {

    /**
     */
    async getEnrichedAirbnbVoteRaw(requestParameters: GetEnrichedAirbnbVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteWithEnrichedAirbnbOptionsDto>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling getEnrichedAirbnbVote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/airbnb/enriched/{voteId}`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteWithEnrichedAirbnbOptionsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getEnrichedAirbnbVote(requestParameters: GetEnrichedAirbnbVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteWithEnrichedAirbnbOptionsDto> {
        const response = await this.getEnrichedAirbnbVoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getVoteOptionExternalDataStatusRaw(requestParameters: GetVoteOptionExternalDataStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: boolean; }>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling getVoteOptionExternalDataStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/airbnb/enriched/options/{optionId}/status`;
        urlPath = urlPath.replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getVoteOptionExternalDataStatus(requestParameters: GetVoteOptionExternalDataStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: boolean; }> {
        const response = await this.getVoteOptionExternalDataStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getVoteOptionPictureRaw(requestParameters: GetVoteOptionPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling getVoteOptionPicture().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/airbnb/enriched/options/{optionId}/picture`;
        urlPath = urlPath.replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getVoteOptionPicture(requestParameters: GetVoteOptionPictureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getVoteOptionPictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async triggerRetryFailedScrapesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/airbnb/enriched/retry-failed-scrapes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async triggerRetryFailedScrapes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.triggerRetryFailedScrapesRaw(initOverrides);
        return await response.value();
    }

}
