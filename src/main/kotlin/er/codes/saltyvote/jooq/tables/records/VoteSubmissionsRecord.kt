/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.records


import er.codes.saltyvote.jooq.tables.VoteSubmissions

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VoteSubmissionsRecord() : UpdatableRecordImpl<VoteSubmissionsRecord>(VoteSubmissions.VOTE_SUBMISSIONS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var voteId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var userId: UUID?
        set(value): Unit = set(2, value)
        get(): UUID? = get(2) as UUID?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised VoteSubmissionsRecord
     */
    constructor(id: Long? = null, voteId: Long? = null, userId: UUID? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.voteId = voteId
        this.userId = userId
        this.createdAt = createdAt
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised VoteSubmissionsRecord
     */
    constructor(value: er.codes.saltyvote.jooq.tables.pojos.VoteSubmissions?): this() {
        if (value != null) {
            this.id = value.id
            this.voteId = value.voteId
            this.userId = value.userId
            this.createdAt = value.createdAt
            resetTouchedOnNotNull()
        }
    }
}
