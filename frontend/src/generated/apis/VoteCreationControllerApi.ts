/* tslint:disable */
/* eslint-disable */
/**
 * SaltyVote API
 * API documentation for the saltyvote application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AirbnbVoteOptionDto,
  VoteCreationDto,
  VoteDetailDto,
  VoteOptionDto,
} from '../models/index';
import {
    AirbnbVoteOptionDtoFromJSON,
    AirbnbVoteOptionDtoToJSON,
    VoteCreationDtoFromJSON,
    VoteCreationDtoToJSON,
    VoteDetailDtoFromJSON,
    VoteDetailDtoToJSON,
    VoteOptionDtoFromJSON,
    VoteOptionDtoToJSON,
} from '../models/index';

export interface CreateNewVoteRequest {
    req: VoteCreationDto;
}

export interface CreateVoteOptionRequest {
    voteId: number;
    req: VoteOptionDto;
}

export interface CreateVoteOption1Request {
    voteId: number;
    req: AirbnbVoteOptionDto;
}

/**
 * 
 */
export class VoteCreationControllerApi extends runtime.BaseAPI {

    /**
     */
    async createNewVoteRaw(requestParameters: CreateNewVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling createNewVote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['req'] != null) {
            queryParameters['req'] = requestParameters['req'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/vote`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createNewVote(requestParameters: CreateNewVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createNewVoteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createVoteOptionRaw(requestParameters: CreateVoteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling createVoteOption().'
            );
        }

        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling createVoteOption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['req'] != null) {
            queryParameters['req'] = requestParameters['req'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/vote/{voteId}/option`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createVoteOption(requestParameters: CreateVoteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createVoteOptionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createVoteOption1Raw(requestParameters: CreateVoteOption1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling createVoteOption1().'
            );
        }

        if (requestParameters['req'] == null) {
            throw new runtime.RequiredError(
                'req',
                'Required parameter "req" was null or undefined when calling createVoteOption1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['req'] != null) {
            queryParameters['req'] = requestParameters['req'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/vote/{voteId}/option/airbnb`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createVoteOption1(requestParameters: CreateVoteOption1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createVoteOption1Raw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllVotesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VoteDetailDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/vote`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VoteDetailDtoFromJSON));
    }

    /**
     */
    async getAllVotes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VoteDetailDto>> {
        const response = await this.getAllVotesRaw(initOverrides);
        return await response.value();
    }

}
