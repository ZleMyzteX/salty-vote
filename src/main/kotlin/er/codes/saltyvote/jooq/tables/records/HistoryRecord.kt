/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.records


import er.codes.saltyvote.jooq.enums.ActionType
import er.codes.saltyvote.jooq.tables.History

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.JSONB
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class HistoryRecord() : UpdatableRecordImpl<HistoryRecord>(History.HISTORY) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(1, value)
        get(): OffsetDateTime? = get(1) as OffsetDateTime?

    open var actionType: ActionType?
        set(value): Unit = set(2, value)
        get(): ActionType? = get(2) as ActionType?

    open var userId: UUID?
        set(value): Unit = set(3, value)
        get(): UUID? = get(3) as UUID?

    open var eventData: JSONB?
        set(value): Unit = set(4, value)
        get(): JSONB? = get(4) as JSONB?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised HistoryRecord
     */
    constructor(id: Long? = null, createdAt: OffsetDateTime? = null, actionType: ActionType? = null, userId: UUID? = null, eventData: JSONB? = null): this() {
        this.id = id
        this.createdAt = createdAt
        this.actionType = actionType
        this.userId = userId
        this.eventData = eventData
        resetTouchedOnNotNull()
    }
}
