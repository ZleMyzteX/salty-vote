/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables


import er.codes.saltyvote.jooq.Public
import er.codes.saltyvote.jooq.enums.VoteType
import er.codes.saltyvote.jooq.keys.VOTES_PKEY
import er.codes.saltyvote.jooq.keys.VOTES__VOTES_CREATOR_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_OPTIONS__VOTE_OPTIONS_VOTE_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_VOTE_ID_FKEY
import er.codes.saltyvote.jooq.tables.Users.UsersPath
import er.codes.saltyvote.jooq.tables.VoteOptions.VoteOptionsPath
import er.codes.saltyvote.jooq.tables.VoteSubmissions.VoteSubmissionsPath
import er.codes.saltyvote.jooq.tables.records.VotesRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Votes(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VotesRecord>?,
    parentPath: InverseForeignKey<out Record, VotesRecord>?,
    aliased: Table<VotesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VotesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.votes</code>
         */
        val VOTES: Votes = Votes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VotesRecord> = VotesRecord::class.java

    /**
     * The column <code>public.votes.id</code>.
     */
    val ID: TableField<VotesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.votes.title</code>.
     */
    val TITLE: TableField<VotesRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.votes.description</code>.
     */
    val DESCRIPTION: TableField<VotesRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.votes.creator_id</code>.
     */
    val CREATOR_ID: TableField<VotesRecord, UUID?> = createField(DSL.name("creator_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.votes.vote_type</code>.
     */
    val VOTE_TYPE: TableField<VotesRecord, VoteType?> = createField(DSL.name("vote_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(VoteType::class.java), this, "")

    /**
     * The column <code>public.votes.allow_multi</code>.
     */
    val ALLOW_MULTI: TableField<VotesRecord, Boolean?> = createField(DSL.name("allow_multi"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.votes.allow_anonymous</code>.
     */
    val ALLOW_ANONYMOUS: TableField<VotesRecord, Boolean?> = createField(DSL.name("allow_anonymous"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.votes.done</code>.
     */
    val DONE: TableField<VotesRecord, Boolean?> = createField(DSL.name("done"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.votes.created_at</code>.
     */
    val CREATED_AT: TableField<VotesRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.votes.updated_at</code>.
     */
    val UPDATED_AT: TableField<VotesRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VotesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VotesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VotesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.votes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.votes</code> table reference
     */
    constructor(): this(DSL.name("votes"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VotesRecord>?, parentPath: InverseForeignKey<out Record, VotesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VOTES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VotesPath : Votes, Path<VotesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VotesRecord>?, parentPath: InverseForeignKey<out Record, VotesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VotesRecord>): super(alias, aliased)
        override fun `as`(alias: String): VotesPath = VotesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VotesPath = VotesPath(alias, this)
        override fun `as`(alias: Table<*>): VotesPath = VotesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<VotesRecord, Long?> = super.getIdentity() as Identity<VotesRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<VotesRecord> = VOTES_PKEY
    override fun getReferences(): List<ForeignKey<VotesRecord, *>> = listOf(VOTES__VOTES_CREATOR_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, VOTES__VOTES_CREATOR_ID_FKEY, null) }

    private lateinit var _voteOptions: VoteOptionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vote_options</code> table
     */
    fun voteOptions(): VoteOptionsPath {
        if (!this::_voteOptions.isInitialized)
            _voteOptions = VoteOptionsPath(this, null, VOTE_OPTIONS__VOTE_OPTIONS_VOTE_ID_FKEY.inverseKey)

        return _voteOptions;
    }

    val voteOptions: VoteOptionsPath
        get(): VoteOptionsPath = voteOptions()

    private lateinit var _voteSubmissions: VoteSubmissionsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vote_submissions</code> table
     */
    fun voteSubmissions(): VoteSubmissionsPath {
        if (!this::_voteSubmissions.isInitialized)
            _voteSubmissions = VoteSubmissionsPath(this, null, VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_VOTE_ID_FKEY.inverseKey)

        return _voteSubmissions;
    }

    val voteSubmissions: VoteSubmissionsPath
        get(): VoteSubmissionsPath = voteSubmissions()
    override fun `as`(alias: String): Votes = Votes(DSL.name(alias), this)
    override fun `as`(alias: Name): Votes = Votes(alias, this)
    override fun `as`(alias: Table<*>): Votes = Votes(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Votes = Votes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Votes = Votes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Votes = Votes(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Votes = Votes(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Votes = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Votes = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Votes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Votes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Votes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Votes = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Votes = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Votes = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Votes = where(DSL.notExists(select))
}
