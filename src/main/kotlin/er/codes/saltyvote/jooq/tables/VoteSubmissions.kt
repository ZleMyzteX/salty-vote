/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables


import er.codes.saltyvote.jooq.Public
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSIONS_PKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSIONS_VOTE_ID_USER_ID_KEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_USER_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_VOTE_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_SUBMISSION_ID_FKEY
import er.codes.saltyvote.jooq.tables.Users.UsersPath
import er.codes.saltyvote.jooq.tables.VoteOptions.VoteOptionsPath
import er.codes.saltyvote.jooq.tables.VoteSubmissionEntries.VoteSubmissionEntriesPath
import er.codes.saltyvote.jooq.tables.Votes.VotesPath
import er.codes.saltyvote.jooq.tables.records.VoteSubmissionsRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VoteSubmissions(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VoteSubmissionsRecord>?,
    parentPath: InverseForeignKey<out Record, VoteSubmissionsRecord>?,
    aliased: Table<VoteSubmissionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VoteSubmissionsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.vote_submissions</code>
         */
        val VOTE_SUBMISSIONS: VoteSubmissions = VoteSubmissions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VoteSubmissionsRecord> = VoteSubmissionsRecord::class.java

    /**
     * The column <code>public.vote_submissions.id</code>.
     */
    val ID: TableField<VoteSubmissionsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.vote_submissions.vote_id</code>.
     */
    val VOTE_ID: TableField<VoteSubmissionsRecord, Long?> = createField(DSL.name("vote_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vote_submissions.user_id</code>.
     */
    val USER_ID: TableField<VoteSubmissionsRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.vote_submissions.created_at</code>.
     */
    val CREATED_AT: TableField<VoteSubmissionsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VoteSubmissionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VoteSubmissionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VoteSubmissionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vote_submissions</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vote_submissions</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vote_submissions</code> table reference
     */
    constructor(): this(DSL.name("vote_submissions"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteSubmissionsRecord>?, parentPath: InverseForeignKey<out Record, VoteSubmissionsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VOTE_SUBMISSIONS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VoteSubmissionsPath : VoteSubmissions, Path<VoteSubmissionsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteSubmissionsRecord>?, parentPath: InverseForeignKey<out Record, VoteSubmissionsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VoteSubmissionsRecord>): super(alias, aliased)
        override fun `as`(alias: String): VoteSubmissionsPath = VoteSubmissionsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VoteSubmissionsPath = VoteSubmissionsPath(alias, this)
        override fun `as`(alias: Table<*>): VoteSubmissionsPath = VoteSubmissionsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<VoteSubmissionsRecord, Long?> = super.getIdentity() as Identity<VoteSubmissionsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<VoteSubmissionsRecord> = VOTE_SUBMISSIONS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<VoteSubmissionsRecord>> = listOf(VOTE_SUBMISSIONS_VOTE_ID_USER_ID_KEY)
    override fun getReferences(): List<ForeignKey<VoteSubmissionsRecord, *>> = listOf(VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_USER_ID_FKEY, VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_VOTE_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath = users
    val users: UsersPath by lazy { UsersPath(this, VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_USER_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.votes</code> table.
     */
    fun votes(): VotesPath = votes
    val votes: VotesPath by lazy { VotesPath(this, VOTE_SUBMISSIONS__VOTE_SUBMISSIONS_VOTE_ID_FKEY, null) }

    private lateinit var _voteSubmissionEntries: VoteSubmissionEntriesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.vote_submission_entries</code> table
     */
    fun voteSubmissionEntries(): VoteSubmissionEntriesPath {
        if (!this::_voteSubmissionEntries.isInitialized)
            _voteSubmissionEntries = VoteSubmissionEntriesPath(this, null, VOTE_SUBMISSION_ENTRIES__VOTE_SUBMISSION_ENTRIES_SUBMISSION_ID_FKEY.inverseKey)

        return _voteSubmissionEntries;
    }

    val voteSubmissionEntries: VoteSubmissionEntriesPath
        get(): VoteSubmissionEntriesPath = voteSubmissionEntries()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.vote_options</code> table
     */
    val voteOptions: VoteOptionsPath
        get(): VoteOptionsPath = voteSubmissionEntries().voteOptions()
    override fun `as`(alias: String): VoteSubmissions = VoteSubmissions(DSL.name(alias), this)
    override fun `as`(alias: Name): VoteSubmissions = VoteSubmissions(alias, this)
    override fun `as`(alias: Table<*>): VoteSubmissions = VoteSubmissions(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VoteSubmissions = VoteSubmissions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VoteSubmissions = VoteSubmissions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VoteSubmissions = VoteSubmissions(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VoteSubmissions = VoteSubmissions(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VoteSubmissions = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VoteSubmissions = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VoteSubmissions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VoteSubmissions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VoteSubmissions = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VoteSubmissions = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VoteSubmissions = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VoteSubmissions = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VoteSubmissions = where(DSL.notExists(select))
}
