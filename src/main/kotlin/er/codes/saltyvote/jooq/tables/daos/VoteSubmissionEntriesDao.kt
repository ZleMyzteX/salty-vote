/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.daos


import er.codes.saltyvote.jooq.AbstractSpringDAOImpl
import er.codes.saltyvote.jooq.tables.VoteSubmissionEntries
import er.codes.saltyvote.jooq.tables.records.VoteSubmissionEntriesRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Repository
open class VoteSubmissionEntriesDao(configuration: Configuration?) : AbstractSpringDAOImpl<VoteSubmissionEntriesRecord, er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries, Long>(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES, er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries::class.java, configuration) {

    /**
     * Create a new VoteSubmissionEntriesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetchRange(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetch(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries? = fetchOne(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.ID, value)

    /**
     * Fetch records that have <code>submission_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSubmissionId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetchRange(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.SUBMISSION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>submission_id IN (values)</code>
     */
    fun fetchBySubmissionId(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetch(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.SUBMISSION_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>option_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOptionId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetchRange(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.OPTION_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>option_id IN (values)</code>
     */
    fun fetchByOptionId(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetch(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.OPTION_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>rank BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRank(lowerInclusive: Int?, upperInclusive: Int?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetchRange(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.RANK, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rank IN (values)</code>
     */
    fun fetchByRank(vararg values: Int): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetch(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.RANK, *values.toTypedArray())

    /**
     * Fetch records that have <code>selected BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSelected(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetchRange(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.SELECTED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>selected IN (values)</code>
     */
    fun fetchBySelected(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries> = fetch(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES.SELECTED, *values.toTypedArray())
}
