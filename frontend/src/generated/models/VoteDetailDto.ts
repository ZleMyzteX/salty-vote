/* tslint:disable */
/* eslint-disable */
/**
 * SaltyVote API
 * API documentation for the saltyvote application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VoteOptionDto } from './VoteOptionDto';
import {
    VoteOptionDtoFromJSON,
    VoteOptionDtoFromJSONTyped,
    VoteOptionDtoToJSON,
    VoteOptionDtoToJSONTyped,
} from './VoteOptionDto';

/**
 * 
 * @export
 * @interface VoteDetailDto
 */
export interface VoteDetailDto {
    /**
     * 
     * @type {number}
     * @memberof VoteDetailDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof VoteDetailDto
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof VoteDetailDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof VoteDetailDto
     */
    voteType: VoteDetailDtoVoteTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof VoteDetailDto
     */
    allowMultiVote: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VoteDetailDto
     */
    allowAnonymousVote: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VoteDetailDto
     */
    done: boolean;
    /**
     * 
     * @type {Array<VoteOptionDto>}
     * @memberof VoteDetailDto
     */
    options: Array<VoteOptionDto>;
}


/**
 * @export
 */
export const VoteDetailDtoVoteTypeEnum = {
    Ranking: 'RANKING',
    Simple: 'SIMPLE'
} as const;
export type VoteDetailDtoVoteTypeEnum = typeof VoteDetailDtoVoteTypeEnum[keyof typeof VoteDetailDtoVoteTypeEnum];


/**
 * Check if a given object implements the VoteDetailDto interface.
 */
export function instanceOfVoteDetailDto(value: object): value is VoteDetailDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('voteType' in value) || value['voteType'] === undefined) return false;
    if (!('allowMultiVote' in value) || value['allowMultiVote'] === undefined) return false;
    if (!('allowAnonymousVote' in value) || value['allowAnonymousVote'] === undefined) return false;
    if (!('done' in value) || value['done'] === undefined) return false;
    if (!('options' in value) || value['options'] === undefined) return false;
    return true;
}

export function VoteDetailDtoFromJSON(json: any): VoteDetailDto {
    return VoteDetailDtoFromJSONTyped(json, false);
}

export function VoteDetailDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VoteDetailDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'voteType': json['voteType'],
        'allowMultiVote': json['allowMultiVote'],
        'allowAnonymousVote': json['allowAnonymousVote'],
        'done': json['done'],
        'options': ((json['options'] as Array<any>).map(VoteOptionDtoFromJSON)),
    };
}

export function VoteDetailDtoToJSON(json: any): VoteDetailDto {
    return VoteDetailDtoToJSONTyped(json, false);
}

export function VoteDetailDtoToJSONTyped(value?: VoteDetailDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'voteType': value['voteType'],
        'allowMultiVote': value['allowMultiVote'],
        'allowAnonymousVote': value['allowAnonymousVote'],
        'done': value['done'],
        'options': ((value['options'] as Array<any>).map(VoteOptionDtoToJSON)),
    };
}

