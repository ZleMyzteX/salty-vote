/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.daos


import er.codes.saltyvote.jooq.AbstractSpringDAOImpl
import er.codes.saltyvote.jooq.enums.VoteType
import er.codes.saltyvote.jooq.tables.Votes
import er.codes.saltyvote.jooq.tables.records.VotesRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
@Repository
open class VotesDao(configuration: Configuration?) : AbstractSpringDAOImpl<VotesRecord, er.codes.saltyvote.jooq.tables.pojos.Votes, Long>(Votes.VOTES, er.codes.saltyvote.jooq.tables.pojos.Votes::class.java, configuration) {

    /**
     * Create a new VotesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: er.codes.saltyvote.jooq.tables.pojos.Votes): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): er.codes.saltyvote.jooq.tables.pojos.Votes? = fetchOne(Votes.VOTES.ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>creator_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatorId(lowerInclusive: UUID?, upperInclusive: UUID?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.CREATOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>creator_id IN (values)</code>
     */
    fun fetchByCreatorId(vararg values: UUID): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.CREATOR_ID, *values)

    /**
     * Fetch records that have <code>vote_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVoteType(lowerInclusive: VoteType?, upperInclusive: VoteType?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.VOTE_TYPE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vote_type IN (values)</code>
     */
    fun fetchByVoteType(vararg values: VoteType): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.VOTE_TYPE, *values)

    /**
     * Fetch records that have <code>allow_multi BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAllowMulti(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.ALLOW_MULTI, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>allow_multi IN (values)</code>
     */
    fun fetchByAllowMulti(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.ALLOW_MULTI, *values.toTypedArray())

    /**
     * Fetch records that have <code>allow_anonymous BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAllowAnonymous(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.ALLOW_ANONYMOUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>allow_anonymous IN (values)</code>
     */
    fun fetchByAllowAnonymous(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.ALLOW_ANONYMOUS, *values.toTypedArray())

    /**
     * Fetch records that have <code>done BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDone(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.DONE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>done IN (values)</code>
     */
    fun fetchByDone(vararg values: Boolean): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.DONE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetchRange(Votes.VOTES.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByUpdatedAt(vararg values: OffsetDateTime): List<er.codes.saltyvote.jooq.tables.pojos.Votes> = fetch(Votes.VOTES.UPDATED_AT, *values)
}
