/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables.records


import er.codes.saltyvote.jooq.tables.VoteSubmissionEntries

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VoteSubmissionEntriesRecord() : UpdatableRecordImpl<VoteSubmissionEntriesRecord>(VoteSubmissionEntries.VOTE_SUBMISSION_ENTRIES) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var submissionId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var optionId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var rank: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var selected: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised VoteSubmissionEntriesRecord
     */
    constructor(id: Long? = null, submissionId: Long? = null, optionId: Long? = null, rank: Int? = null, selected: Boolean? = null): this() {
        this.id = id
        this.submissionId = submissionId
        this.optionId = optionId
        this.rank = rank
        this.selected = selected
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised VoteSubmissionEntriesRecord
     */
    constructor(value: er.codes.saltyvote.jooq.tables.pojos.VoteSubmissionEntries?): this() {
        if (value != null) {
            this.id = value.id
            this.submissionId = value.submissionId
            this.optionId = value.optionId
            this.rank = value.rank
            this.selected = value.selected
            resetTouchedOnNotNull()
        }
    }
}
