@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.routines.references


import er.codes.saltyvote.jooq.routines.Max
import er.codes.saltyvote.jooq.routines.Min
import er.codes.saltyvote.jooq.routines.Replace
import er.codes.saltyvote.jooq.routines.SplitPart
import er.codes.saltyvote.jooq.routines.Strpos
import er.codes.saltyvote.jooq.routines.Translate

import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field



/**
 * Get <code>public.max</code> as a field.
 */
fun max(
      __1: String?
): AggregateFunction<String?> {
    val f = Max()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>public.max</code> as a field.
 */
fun max(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Max()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>public.min</code> as a field.
 */
fun min(
      __1: String?
): AggregateFunction<String?> {
    val f = Min()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>public.min</code> as a field.
 */
fun min(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = Min()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>public.replace</code>
 */
fun replace(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.replace</code> as a field.
 */
fun replace(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.replace</code> as a field.
 */
fun replace(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = Replace()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.split_part</code>
 */
fun splitPart(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: Int?
): String? {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.split_part</code> as a field.
 */
fun splitPart(
      __1: String?
    , __2: String?
    , __3: Int?
): Field<String?> {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.split_part</code> as a field.
 */
fun splitPart(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<Int?>
): Field<String?> {
    val f = SplitPart()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Call <code>public.strpos</code>
 */
fun strpos(
      configuration: Configuration
    , __1: String?
    , __2: String?
): Int? {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.strpos</code> as a field.
 */
fun strpos(
      __1: String?
    , __2: String?
): Field<Int?> {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public.strpos</code> as a field.
 */
fun strpos(
      __1: Field<String?>
    , __2: Field<String?>
): Field<Int?> {
    val f = Strpos()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.translate</code>
 */
fun translate(
      configuration: Configuration
    , __1: String?
    , __2: String?
    , __3: String?
): String? {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.translate</code> as a field.
 */
fun translate(
      __1: String?
    , __2: String?
    , __3: String?
): Field<String?> {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}

/**
 * Get <code>public.translate</code> as a field.
 */
fun translate(
      __1: Field<String?>
    , __2: Field<String?>
    , __3: Field<String?>
): Field<String?> {
    val f = Translate()
    f.set__1(__1)
    f.set__2(__2)
    f.set__3(__3)

    return f.asField()
}
