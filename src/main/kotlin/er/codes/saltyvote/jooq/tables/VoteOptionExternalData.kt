/*
 * This file is generated by jOOQ.
 */
package er.codes.saltyvote.jooq.tables


import er.codes.saltyvote.jooq.Public
import er.codes.saltyvote.jooq.keys.VOTE_OPTION_EXTERNAL_DATA_PKEY
import er.codes.saltyvote.jooq.keys.VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_AIRBNB_PICTURE_LOCAL_ID_FKEY
import er.codes.saltyvote.jooq.keys.VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_VOTE_OPTION_ID_FKEY
import er.codes.saltyvote.jooq.tables.LocalPictureStore.LocalPictureStorePath
import er.codes.saltyvote.jooq.tables.VoteOptions.VoteOptionsPath
import er.codes.saltyvote.jooq.tables.records.VoteOptionExternalDataRecord

import java.math.BigDecimal
import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class VoteOptionExternalData(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, VoteOptionExternalDataRecord>?,
    parentPath: InverseForeignKey<out Record, VoteOptionExternalDataRecord>?,
    aliased: Table<VoteOptionExternalDataRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<VoteOptionExternalDataRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.vote_option_external_data</code>
         */
        val VOTE_OPTION_EXTERNAL_DATA: VoteOptionExternalData = VoteOptionExternalData()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<VoteOptionExternalDataRecord> = VoteOptionExternalDataRecord::class.java

    /**
     * The column <code>public.vote_option_external_data.id</code>.
     */
    val ID: TableField<VoteOptionExternalDataRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.vote_option_external_data.vote_option_id</code>.
     */
    val VOTE_OPTION_ID: TableField<VoteOptionExternalDataRecord, Long?> = createField(DSL.name("vote_option_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vote_option_external_data.source_url</code>.
     */
    val SOURCE_URL: TableField<VoteOptionExternalDataRecord, String?> = createField(DSL.name("source_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.vote_option_external_data.airbnb_title</code>.
     */
    val AIRBNB_TITLE: TableField<VoteOptionExternalDataRecord, String?> = createField(DSL.name("airbnb_title"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>public.vote_option_external_data.airbnb_review_count</code>.
     */
    val AIRBNB_REVIEW_COUNT: TableField<VoteOptionExternalDataRecord, BigDecimal?> = createField(DSL.name("airbnb_review_count"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column
     * <code>public.vote_option_external_data.airbnb_star_rating</code>.
     */
    val AIRBNB_STAR_RATING: TableField<VoteOptionExternalDataRecord, BigDecimal?> = createField(DSL.name("airbnb_star_rating"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column
     * <code>public.vote_option_external_data.airbnb_picture_url</code>.
     */
    val AIRBNB_PICTURE_URL: TableField<VoteOptionExternalDataRecord, String?> = createField(DSL.name("airbnb_picture_url"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>public.vote_option_external_data.airbnb_picture_local_id</code>.
     */
    val AIRBNB_PICTURE_LOCAL_ID: TableField<VoteOptionExternalDataRecord, Long?> = createField(DSL.name("airbnb_picture_local_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.vote_option_external_data.raw_payload</code>.
     */
    val RAW_PAYLOAD: TableField<VoteOptionExternalDataRecord, JSONB?> = createField(DSL.name("raw_payload"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.vote_option_external_data.created_at</code>.
     */
    val CREATED_AT: TableField<VoteOptionExternalDataRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<VoteOptionExternalDataRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<VoteOptionExternalDataRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<VoteOptionExternalDataRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.vote_option_external_data</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.vote_option_external_data</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.vote_option_external_data</code> table reference
     */
    constructor(): this(DSL.name("vote_option_external_data"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteOptionExternalDataRecord>?, parentPath: InverseForeignKey<out Record, VoteOptionExternalDataRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, VOTE_OPTION_EXTERNAL_DATA, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class VoteOptionExternalDataPath : VoteOptionExternalData, Path<VoteOptionExternalDataRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, VoteOptionExternalDataRecord>?, parentPath: InverseForeignKey<out Record, VoteOptionExternalDataRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<VoteOptionExternalDataRecord>): super(alias, aliased)
        override fun `as`(alias: String): VoteOptionExternalDataPath = VoteOptionExternalDataPath(DSL.name(alias), this)
        override fun `as`(alias: Name): VoteOptionExternalDataPath = VoteOptionExternalDataPath(alias, this)
        override fun `as`(alias: Table<*>): VoteOptionExternalDataPath = VoteOptionExternalDataPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<VoteOptionExternalDataRecord, Long?> = super.getIdentity() as Identity<VoteOptionExternalDataRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<VoteOptionExternalDataRecord> = VOTE_OPTION_EXTERNAL_DATA_PKEY
    override fun getReferences(): List<ForeignKey<VoteOptionExternalDataRecord, *>> = listOf(VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_AIRBNB_PICTURE_LOCAL_ID_FKEY, VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_VOTE_OPTION_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.local_picture_store</code>
     * table.
     */
    fun localPictureStore(): LocalPictureStorePath = localPictureStore
    val localPictureStore: LocalPictureStorePath by lazy { LocalPictureStorePath(this, VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_AIRBNB_PICTURE_LOCAL_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.vote_options</code> table.
     */
    fun voteOptions(): VoteOptionsPath = voteOptions
    val voteOptions: VoteOptionsPath by lazy { VoteOptionsPath(this, VOTE_OPTION_EXTERNAL_DATA__VOTE_OPTION_EXTERNAL_DATA_VOTE_OPTION_ID_FKEY, null) }
    override fun `as`(alias: String): VoteOptionExternalData = VoteOptionExternalData(DSL.name(alias), this)
    override fun `as`(alias: Name): VoteOptionExternalData = VoteOptionExternalData(alias, this)
    override fun `as`(alias: Table<*>): VoteOptionExternalData = VoteOptionExternalData(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VoteOptionExternalData = VoteOptionExternalData(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VoteOptionExternalData = VoteOptionExternalData(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VoteOptionExternalData = VoteOptionExternalData(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VoteOptionExternalData = VoteOptionExternalData(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VoteOptionExternalData = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VoteOptionExternalData = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VoteOptionExternalData = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VoteOptionExternalData = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VoteOptionExternalData = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VoteOptionExternalData = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VoteOptionExternalData = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VoteOptionExternalData = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VoteOptionExternalData = where(DSL.notExists(select))
}
