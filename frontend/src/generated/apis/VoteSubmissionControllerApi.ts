/* tslint:disable */
/* eslint-disable */
/**
 * SaltyVote API
 * API documentation for the saltyvote application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VoteDetailedResultsDto,
  VoteResultsDto,
  VoteSubmissionDto,
  VoteSubmissionResponseDto,
} from '../models/index';
import {
    VoteDetailedResultsDtoFromJSON,
    VoteDetailedResultsDtoToJSON,
    VoteResultsDtoFromJSON,
    VoteResultsDtoToJSON,
    VoteSubmissionDtoFromJSON,
    VoteSubmissionDtoToJSON,
    VoteSubmissionResponseDtoFromJSON,
    VoteSubmissionResponseDtoToJSON,
} from '../models/index';

export interface DeleteMySubmissionRequest {
    voteId: number;
}

export interface GetDetailedVoteResultsRequest {
    voteId: number;
}

export interface GetMySubmissionRequest {
    voteId: number;
}

export interface GetVoteResultsRequest {
    voteId: number;
}

export interface SubmitVoteRequest {
    voteSubmissionDto: VoteSubmissionDto;
}

/**
 * 
 */
export class VoteSubmissionControllerApi extends runtime.BaseAPI {

    /**
     */
    async deleteMySubmissionRaw(requestParameters: DeleteMySubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling deleteMySubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/submissions/my`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteMySubmission(requestParameters: DeleteMySubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMySubmissionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDetailedVoteResultsRaw(requestParameters: GetDetailedVoteResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteDetailedResultsDto>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling getDetailedVoteResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/results/detailed`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteDetailedResultsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getDetailedVoteResults(requestParameters: GetDetailedVoteResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteDetailedResultsDto> {
        const response = await this.getDetailedVoteResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMySubmissionRaw(requestParameters: GetMySubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteSubmissionResponseDto>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling getMySubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/submissions/my`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteSubmissionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMySubmission(requestParameters: GetMySubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteSubmissionResponseDto> {
        const response = await this.getMySubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getVoteResultsRaw(requestParameters: GetVoteResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteResultsDto>> {
        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling getVoteResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/votes/{voteId}/results`;
        urlPath = urlPath.replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteResultsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getVoteResults(requestParameters: GetVoteResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteResultsDto> {
        const response = await this.getVoteResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async submitVoteRaw(requestParameters: SubmitVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['voteSubmissionDto'] == null) {
            throw new runtime.RequiredError(
                'voteSubmissionDto',
                'Required parameter "voteSubmissionDto" was null or undefined when calling submitVote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/votes/submissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoteSubmissionDtoToJSON(requestParameters['voteSubmissionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async submitVote(requestParameters: SubmitVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.submitVoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
